--langdef=scala
--langmap=scala:.scala
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*class[ \t]+([a-zA-Z0-9_]+)/\4/c,classes/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*object[ \t]+([a-zA-Z0-9_$]+)/\4/c,objects/
--regex-scala=/^[ \t]*((@Lenses|abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case class[ \t]+([a-zA-Z0-9_$]+)/\4/c,case classes/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case object[ \t]+([a-zA-Z0-9_$]+)/\4/c,case objects/
--regex-scala=/^[ \t]*((@typeclass|abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*trait[ \t]+([a-zA-Z0-9_]+)/\4/t,traits/
--regex-scala=/^[ \t]*type[ \t]+([a-zA-Z0-9_]+)/\1/T,types/
--regex-scala=/^[ \t]*((@tailrec|abstract|final|override|sealed|implicit|lazy|private|protected)[ \t]*)*def[ \t]+([a-zA-Z0-9_ƒ$]+)/\3/m,methods/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy|private|protected)[ \t]*)*val[ \t]+([a-zA-Z0-9_ƒ$]+)/\3/l,constants/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy|private|protected)[ \t]*)*var[ \t]+([a-zA-Z0-9_ƒ]+)/\3/l,variables/
--regex-scala=/^[ \t]*package[ \t]+([a-zA-Z0-9_.]+)/\1/p,packages/

--langdef=purescript
--langmap=purescript:.purs
--regex-purescript=/^module[ \s]([a-zA-Z0-9]*)[ \s]where/\1/m,module/
--regex-purescript=/^import[ \s](.*)/\1/i,import/
--regex-purescript=/^class[ \s](.*)where/\1/t,typeclasses/
--regex-purescript=/^instance[ \s](.*)where/\1/c,instances/
--regex-purescript=/^data[ \s]([a-zA-Z0-9]*)[ \s]/\1/d,data/
--regex-purescript=/^newtype[ \s]([a-zA-Z0-9]*)[ \s]/\1/n,newtype/
--regex-purescript=/^type[ \s]([a-zA-Z0-9]*)[ \s]/\1/t,type/
--regex-purescript=/^([ \sa-zA-Z0-9]*)[ \s]::[ \s](.*)$/\1/f,functions/

--langdef=haskell
--langmap=haskell:.hs
--regex-haskell=/^module[ \t]*([A-Z][a-zA-Z0-9'_.]*)/\1/m,module/
--regex-haskell=/^(new)?type[ \t]*([A-Z][a-zA-Z0-9'_]*)./\2/t,type/
--regex-haskell=/^class[ \t]*([A-Z][a-zA-Z0-9'_]*)/\1/c,class/
--regex-haskell=/^data[ \t]*([A-Z][a-zA-Z0-9'_]*)/\1/d,data/
--regex-haskell=/^( *[a-z_][a-zA-Z0-9'_]*).*=/\1/v,function/
